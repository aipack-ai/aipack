# Options

```toml
model = "flash"
input_concurrency = 6
```

# Before All

```lua
local p_utils = require("pricing_utils")

local base_dir = p_utils.base_dir

-- NOTE: Just delete the .md file for the provider name to have it load it. 

-- GROQ      - https://console.groq.com/docs/models pricing: https://groq.com/pricing/
-- OPENAI    - https://platform.openai.com/docs/pricing/
-- XAI       - https://console.x.ai/team/5577cfb2-dfde-4893-9817-4eb4de1d4098/models
-- FIREWORKS - Login with filter https://app.fireworks.ai/models?filter=LLM&serverless=true, 
--             Static https://fireworks.ai/pricing#serverless-pricing
local inputs = {
   -- This openai link does not work with puppeteer, needs to copy/paste conine in the pricing-openai.md
   {name = "openai",    do_json = false,  url = ""},
   

   {name = "gemini",    do_json = false,  url = "https://ai.google.dev/pricing"},
   {name = "deepseek",  do_json = false,  url = "https://api-docs.deepseek.com/quick_start/pricing"},
   {name = "anthropic", do_json = false,  url = "https://docs.anthropic.com/en/docs/about-claude/models/overview"},

   {name = "groq",      do_json = false,  url = ""},
   {name = "xai",       do_json = false,  url = ""}, 

   {name = "fireworks", do_json = true,   url = ""}
}

-- Agument inputs
for _, input in ipairs(inputs) do
    input.md_path = base_dir .. "/.data/pricing-" .. input.name .. ".md"
    input.json_path = base_dir .. "/.data/pricing-" .. input.name .. ".json"
end

return aipack.before_all_response({
    inputs     = inputs
})
```

# Data

```lua
local md_path = input.md_path
local json_path = input.json_path

if not input.do_json  then
    return aipack.skip("" .. input.name .. " marked as do_json = false, so skipping")
end

local rem_url = input.url

if not aip.path.exists(md_path) then 
    local req = {
        jsonrpc = "2.0",
        method = "get_md",
        params = { url = rem_url },
        id = 1
    }

    -- Yes, it will require to have this mini rpc service (just wrapper on top of puppeteer)
    local res = aip.web.post("http://localhost:3000/jsonrpc", req)

    local content = res.content.result.content
    aip.file.save(md_path, content)
end

local file = aip.file.load(md_path)

return {
    provider = input.name,
    content = file.content
}
```

# Instruction

From this content for the {{data.provider}}: 

```md
{{data.content}}
```

- Create a pricing JSON
- Make sure all models are all lowercase
- For Groq models, there are two sections in the markdown, the pricing and the name. Make sure to take the name from the name section, and infer the "display name" to get the pricing. 
- For Fireworks models: 
    - For the Fireworks models, the model name is after the `/models/fireworks/`. So, `/models/fireworks/qwen3-coder-480b-a35b-instruct` the model name will be `qwen3-coder-480b-a35b-instruct`
    - For the Fireworks models, when only one price, it means same price for input and output. 
    - For the fireworks models, have only the qwen3, Kimi, lama 4, and gml 4 are to be flagged recent, the rest flagged recent = false. 
- For Anthropic Models (Claude), the `.` should be replaced by `-`
- For Anthropic Models (Claude), the name/value is inverse. For value, and then, label of this value. 
- For Anthropic Models (Claude), when caching write value, put it in `.cache_write`, and then, the cache value goes in `.cached`
- For Anthropic models (Cluade), make sure you get the model names from the model is, and remove the `-2025...`
- For gemini models, there is no `caching write`, so cache value is for the `.cached` property. 
- For Gemini models, do not add the audio or tts model.
- but for gemini model, keep the `.` in the name.
- For Gemini model, `gemini-2.5-pro-preview` and `gemini-2.5-flash-preview` remove the `-preview` in the name
- For deepseek model, ignore the discound price
- For OpenAI Models, ignore the lines have have dates like text, like `2024-05-13` 
- For OpenAI Models, only take the Text tokens section, ignore the other sections. 
- For OpenAI Models, there are not cash write, so, only input and cached when present, and then the output. 
- Do not put in code block, just the raw json, pretty formatted.
- If caching price not available, set to `null`
- If price has text and audio, take the text price
- When decimal, do not end with 0s. Just up to the number. 

with following schema

```ts
{
    models:
        {
            name: string,
            input: {
                cache_write: number | null,
                cached: number | null,
                normal: number | null,
            },
            output: number, 
            recent: boolean, // default true if not sure
        }[]
}
```


# Output 

```lua
local content = ai_response.content
content = aip.md.outer_block_content_or_raw(content)

aip.file.save(input.json_path, content)
```

# After All


```lua
local p_utils = require("pricing_utils")

local json_path = p_utils.json_all_path

-- == Prep the final json
local content = "{\n"

local last_idx = #inputs

for k, input in pairs(inputs) do
  local json_path = input.json_path
  local file_content = aip.file.load(json_path).content
  content = content .. "\"" .. input.name .. "\": " .. file_content
  if k == last_idx then 
    content = content .. "\n"
  else
    content = content .. ",\n"
  end
end

content = content .. "}"

-- == Normalize json
local json    = aip.json.parse(content)
local content = aip.json.stringify_pretty(json)

-- == Save final json
aip.file.save(json_path, content)

```