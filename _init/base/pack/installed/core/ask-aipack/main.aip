# Data

```lua

-- === Prep the prompt file
local prompt_absolute_dir = CTX.WORKSPACE_AIPACK_DIR .. "/.prompt/" .. CTX.PACK_IDENTITY
local prompt_file_path = prompt_absolute_dir .. "/ask-aipack.md"
local placeholder_text = [[
> Placeholder:
>    - Ask your question above the ==== separator
>    - and `aip run core@ask-aipack`
>    - or **Replay** in the terminal if already running
>    - Answers will appear below, in markdown sections
>    - You can remove those lines starting with >, 
>    - they are not included in the prompt

====

]]

if not utils.path.exists(prompt_file_path) then
    utils.file.save(prompt_file_path, placeholder_text)

    -- Open it with VSCode
    -- Call with pcall to prevent failure if the code is not available
    -- TODO: Enhance this part (should notify the user)
    pcall(utils.cmd.exec,"code", {prompt_file_path} )
end

-- === Load prompt file
local prompt_file_content = utils.file.load(prompt_file_path).content
if not prompt_file_content:find("%S") then
    utils.file.save(prompt_file_path, placeholder_text)
    prompt_file_content = utils.file.load(prompt_file_path).content
end

-- Note important to split on `====\n` otherwise, the doc can be split. 
local first_part, second_part = utils.text.split_first(prompt_file_content, "====\n")
print("..." .. first_part)
local _line_blocks, prompt_content = utils.text.extract_line_blocks(first_part, {starts_with = ">", extrude = "content"})


if not prompt_content:find("%S") then
    return aipack.skip("Empty prompt. Enter you question and replay")
end

prompt_content = utils.text.trim(prompt_content)

-- === Load the knowledge/doc files
-- The `list_load` function will list the files from the aipack parent directory and load each of them
-- so, each item is a FileRecord
local doc_globs = CTX.BASE_AIPACK_DIR .. "/doc/**/*.md"
local doc_files = utils.file.list_load(doc_globs, {absolute = true})
print("Including " .. #doc_files .. " documentation files")

-- Agument with the pass diff
-- NOTE: Vscode cannot open absolute paths, at least when out of workspace
--       So, doing relative path with the ../../ does seems to work
for _, doc_file in ipairs(doc_files) do
    doc_file.path_diff = utils.path.diff(doc_file.path, prompt_absolute_dir)
end

-- === Return the data

return {
    first_part       = first_part,
    second_part      = second_part,
    prompt_content   = prompt_content,
    prompt_file_path = prompt_file_path,
    doc_files        = doc_files
}
```

# System

Your goal is to answer **aipack** questions in a concise and precise manner, with some code examples when appropriate.

**aipack** is a command line utility that allows you to write agents in a markdown file, with full control over the prompt, using a multi-stage approach.

Here are some documentation files, separated with `=== ../../path/to/document.md` for you to refer to in your answer (keep it as such when given a reference)

{{#each data.doc_files}}

=== {{this.path_diff}}
{{this.content}}

{{/each}}


# System

- When the user asks a question, provide the answer.
- Give me the file path of where the answer was found.
- Format the answer this way:

```
# QUESTION: _user_question_

_answer_
```

- When using bullet point, use the `-` character
- For the `_user_question_` text, if the question is short, put it there; if it is long or contains special characters, summarize the question and put it there.
- For the `# Instruction` and `# System`, the content is just normal markdown, not in a markdown code block, except when putting some code, where it is appropriate to put them in the appropriate code block.
- If it is appropriate, do not hesitate to use bullet points to help clarify and conciseness.
- When the user asks to generate a stage of an aip file, do not wrap it with a `lua` code block, just `# stage_name` and then put the Lua code in the `lua` code block.
- When providing the answer, do not surround it in a markdown code block.
- For the `# Instruction`, `# System`, and `# Assistant` sections, do not put the template in markdown code block handlebars, as this is not needed by aipack. Just the text with the handlebars characters, that will work nicely.
- Remember, a `.aipack` file is a markdown file, so when giving aipack examples, do not surround the aipack stages example with a markdown code block. Just put them in lines.
- When giving the reference to the doc file, just hgive the path given in the prompt, with the format `[doc/file_name](file_path)`. Do not escale the / of the filepath. Leave them as is. 


# Instruction

Here is the user question:

{{data.prompt_content}}

# Output

```lua

-- Extract content from the AI response
local answer = ai_response.content

-- === Cleanup answer
-- Sometimes, some models still put the result in a markdown block.
-- This alleviates some of these issues (when it starts with ```)
local answer = utils.md.outer_block_content_or_raw(answer)
local answer = utils.text.trim(answer)

-- === Rebuild prompt file
new_content = utils.text.trim_end(data.first_part)
new_content = new_content .. "\n\n====\n"

new_content = new_content .. "\n" .. answer .. "\n\n> genai info: " .. ai_response.info

if data.second_part then
    new_content = new_content .. "\n\n====\n\n" .. utils.text.trim(data.second_part)
end

-- Save the new content back to the file
utils.file.save(data.prompt_file_path, new_content)

return "core@ask-aipack done"

```