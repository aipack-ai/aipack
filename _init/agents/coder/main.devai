# Options 

```toml
# o3-mini-high 
model = "o3-mini-high"
```

# Before All

Here we do the prep work in the "Before All" section in case we need to set `split_file_into_inputs = true`.
This will return inputs, where each input will have `.src_files: string[]`.
This way, the input run can operate on multiple files or just get one file in the array (or eventually more than one).

```lua
local p_utils = require("prompt_utils")

-- == Init the prompt files

local placeholder_suffix = [[
Ask your coding question or instructions. Remove this placeholder line and provide the base_dir below. 
]]
placeholder_suffix = placeholder_suffix .. "\n```toml\n"
placeholder_suffix = placeholder_suffix .. [[
#!meta
# Provide the base_dir you want to work from (if absent, the response will be in the second part of this prompt file, and no file will be created/updated)
# base_dir = "src"

# Customize your globs from base_dir (see below default)
# Narrow is better (cost and quality, as it allows the model to focus on what matters)
# globs = {"**/*.rs", "**/*.lua", "**/*.go", "**/*.java", "**/*.html", "**/*.js", "**/*.ts", "**/*.tsx", "**/*.css", "**/*.pcss", "**/*.scss"}

# Here, set your model override (by default o3-mini-high)
# For fast: "gemini-2.0-flash-001", for top gun: "o3-mini-high"
# model = gemini-2.0-flash-001
]]
placeholder_suffix = placeholder_suffix .. "```"

local prompt_file = p_utils.prep_prompt_file(input, {
    default_name           = "_prompt_coder",
    placeholder_suffix     = placeholder_suffix,
    add_separator          = true
})

-- == Extract data from prompt files

-- Split the prompt into inst and content 
local first_part, second_part = p_utils.prep_inst_and_content(prompt_file.content, "====", {content_is_default = false})

-- Clean the second_part 
second_part = utils.text.trim(second_part)
if second_part:sub(1, 6) == "> Info" then
    second_part = utils.text.remove_first_line(second_part)
    second_part = utils.text.trim(second_part)
end

if #second_part == 0 then
    second_part = nil
end

-- Note: For now, we ignore the second part, as this will display what the AI says beside the code it gives. This allows for explanations, but there is no need to put it back in context.

local meta, inst = utils.md.extract_meta(first_part)
local base_dir = meta.base_dir

local should_skip = p_utils.should_skip(inst, second_part)
if should_skip ~= nil then
    return should_skip
end

-- == Prep the src_files

local src_refs = nil
if base_dir ~= nil then
    base_dir =  base_dir:gsub("/+$", "")

    local globs = meta.globs

    if globs == nil then
        globs = {"**/*.rs", "**/*.lua", "**/*.go", "**/*.java", "**/*.html", "**/*.js", "**/*.ts", "**/*.tsx", "**/*.css", "**/*.pcss", "**/*.scss"}
    end
    
    src_refs =  utils.file.list(globs, {base_dir = base_dir})  
    print("INFO: Files to be included: " .. #src_refs)
else
    print("INFO: No base_dir, update in place ")
end

-- == Build the input (for now, only one)
local input = {
    default_lang  = "Rust Programming",
    first_part    = first_part,
    second_part   = second_part,
    prompt_path   = prompt_file.path,
    inst          = inst,
    base_dir      = base_dir,
    src_refs      = src_refs,
}

-- == Compute the agent options
local options = {}
options.model       = meta.model
options.temperature = meta.temperature

-- NOTE: for now, it is just one input, but the goal is to allow 

return devai.before_all_response({
    inputs  = { input },
    options = options
})

```

# Data

```lua

local src_files = nil

if input.src_refs ~= nil then 
    src_files = {}
    for _, file_ref in ipairs(input.src_refs) do
        local file = utils.file.load(file_ref.path, {base_dir = input.base_dir})
        -- Augment the file with the comment file path
        file.comment_file_path = utils.code.comment_line(file.ext, "file: " .. file.path)
        table.insert(src_files, file)
    end
    input.src_refs = nil
    input.src_files = src_files
end

-- Return the input prep by before all (for now)
return input
```

# System

You are a senior developer expert who has deep expertise in many languages and creates production-grade quality code (simple and scalable). 

The user instruction will ask you to review/update the existing code or create new code if no existing code is provided.

When the language cannot be inferred from the user, or files provided, assume the question is for the programming language {{data.default_lang}}.

When you give bullet points, separate them with empty lines for clarity. 

Also, respect the space/tab of the code exactly. 

Here are some conventions and best practices to follow. 

## Code block & file name convention

The files provided will be in a markdown code block, with the appropriate language (file extension) with the first line following this format (with the comment language) `// file: path/to/file.ext`

For example, for JavaScript, Java, Rust, and `//` comment languages, the file will be 
```js
// file: path/to/app.js
... some content
```

- So, for HTML files, it will be `<!-- file: path/to/file.html -->`

- For SQL, Lua, and other `--` comment languages, it will be `-- file: path/to/file...` (with the appropriate extension)

- For CSS, PCSS, and similar files, it will be `/* file: path/to/file... */`  (with the appropriate extension)

- This way, the code block generated for a language is valid for that language. 

- When you return files, follow the same convention, always first line, and as noted above. Usually, files will be given this way too.  

## Languages best practices

### Rust

- Mostly assume that there is a `Result<T>` type alias in the module import, when doing a `use crate::Result` or whatever the used result is. 

- Keep code simple and to the point. Limit allocation when possible, but try to avoid creating types with lifetime when not strictly needed. 

### HTML

- Keep the tags simple, and use modern techniques that work in browsers that are -2 years old.

- Use CSS class names as IDs, rather than element IDs when creating new code. 
    - However, do not change the code unless explicitly asked by the user. 

### JavaScript

- Use the web module loading so that we can use modern JavaScript. 

- When drawing, try to use Canvas 2D. 

- Use standard fetch to retrieve JSON. 

### CSS

- Try to use CSS Grid when possible. 

- When files are `.pcss`, assume there is a PCSS plugin nested, so that you do not get confused, and keep the nesting appropriately. 

### General

- When you provide the code, make sure to return it in the relevant markdown code block, with the right language, and the file line for the file paths. 

- Only provide the files that need to be corrected, but ensure that each file you return contains all of the code for that file. 

- Ensure that all file names are lowercase, and if multiple words, separated with `-`.

- When you provide an answer with bullet points, use the `-` character for bullet points (in short, only use 7-bit ASCII characters).

- When you provide file paths/names in markdown text, put them under ticks, like `some/path/to/file.rs`.

{{#if data.src_files}}

## User's context & source files

Here are the source files: 

    {{#each data.src_files}}

```{{this.ext}}
{{this.comment_file_path}}
{{this.content}}
```

Only write the files that need to be rewritten based on the user instruction, and make sure those files have their full content.  

    {{/each}}

{{else}}

{{#if data.second_part}}
## User's context

Here is some context and/or your previous answer:

{{data.second_part}}

{{/if}}
{{/if}}


The user instruction will ask you to review/update the existing code or create a new one if no existing code is provided.


# Instruction

{{#if data.inst}}
Here are the additional user instructions
== Start User Instructions
{{data.inst}}
== End User Instructions
{{/if}}

# Output

```lua

local msg = "Prompt updated with AI Response"

local base_dir = data.base_dir

-- Debug
-- local usage = utils.lua.dump(ai_response.usage)
-- print("usage \n" .. usage)

local ai_content = ai_response.content


-- local ai_content = utils.file.load(base_dir .. "/.ai_response.md").content

-- By default, the second part is the ai_content
local second_part = ai_content

-- == Write to the src file
if data.src_files ~= nil then
    utils.file.save(base_dir .. "/.ai_response.md", ai_content)
    local blocks, other_content = utils.md.extract_blocks(ai_content, {extrude = "content"})
    -- In this case, the other_content becomes the second_part
    second_part = other_content
    msg = "Files updated: "
    for _, block in ipairs(blocks) do
        local first, remain = utils.text.split_first(block.content, "\n")
        local file_path = first:match("// file:%s*(.+)")
        if file_path then 
            file_path = base_dir .. "/" .. file_path
            utils.file.save(file_path, remain)
            msg = msg .. file_path .. " " 
        end
    end
end

-- == Update the prompt file
local preamble = "" -- This will be the eventual instruction with separator
if data.first_part then
    local first_part = utils.text.trim_end(data.first_part)

    preamble = first_part .. "\n\n====\n> Info: " .. ai_response.info .. "\n\n"
    
    second_part = utils.text.trim_start(second_part)
end

local prompt_content = preamble .. second_part

utils.file.save(data.prompt_path, prompt_content)

-- This will be printed by devai if it is a string
return msg
```
